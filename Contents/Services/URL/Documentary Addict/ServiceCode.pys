ICON = 'https://pbs.twimg.com/profile_images/2342248169/iq0isyujgjtqczpyxjke_400x400.gif'

####################################################################################################
def MetadataObjectForURL(url):

    pageElement = HTML.ElementFromURL(url, cacheTime = CACHE_1HOUR)

    title = pageElement.xpath("//head/title/text()")[0].strip()
    thumb = pageElement.xpath("//meta[@itemprop='thumbnailUrl']/@content")[0].strip()
    summary = String.StripTags(''.join(pageElement.xpath("//*[@role='main']//p/text()")))

    try:    
        embed_url = pageElement.xpath("//embed/@src")[0]
    except:
        try:
            embed_url = pageElement.xpath("//meta[@itemprop='embedUrl']/@content")[0]
        except:
            raise Ex.MediaNotAvailable

    if embed_url.startswith('//'):
        embed_url = 'http:' + embed_url
    
    metadata = URLService.MetadataObjectForURL(embed_url)
    
    if not metadata:
        raise Ex.MediaNotAvailable
        
    originally_available_at = None
    if metadata.originally_available_at:
        originally_available_at = metadata.originally_available_at
    
    duration = None
    if metadata.duration:
        duration = metadata.duration
        
    art = None
    if metadata.thumb:
        art = metadata.thumb
    
    rating = None
    if metadata.rating:
        rating = metadata.rating
    
    
    return VideoClipObject(
        title = title,
        summary = summary,
        originally_available_at = originally_available_at,
        rating = rating,
        thumb = thumb,
        art = art,
        duration = duration,
        source_icon = ICON
    )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    pageElement = HTML.ElementFromURL(url, cacheTime = CACHE_1HOUR)
    
    try:    
        embed_url = pageElement.xpath("//embed/@src")[0]
    except:
        try:
            embed_url = pageElement.xpath("//meta[@itemprop='embedUrl']/@content")[0]
        except:
            raise Ex.MediaNotAvailable

    if embed_url.startswith('//'):
        embed_url = 'http:' + embed_url
        
    media_objects = URLService.MediaObjectsForURL(embed_url)
    
    return media_objects
